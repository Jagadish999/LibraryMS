//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace LMS.Application.LLBL.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpUserCustomerTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserCustomerTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpUserCustomerTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserCustomerTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserCustomerTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserCustomerTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserCustomerTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserCustomerTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserCustomerTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserCustomerTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserCustomerTskResult> SpUserCustomerTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserCustomerTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserCustomerTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserCustomerTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserCustomerTskResult> SpUserCustomerTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserCustomerTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpUserCustomerTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpUserCustomerTsk' to stored procedure 'SpUserCustomerTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserCustomerTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Jagadish_LibraryMS].[dbo].[SpUserCustomerTsk]", "SpUserCustomerTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}


		/// <summary>Return value struct for the async method SpUserCustomerTskAsync().</summary>
		public struct SpUserCustomerTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

	}
}
